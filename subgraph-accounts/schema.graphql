extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.4",
        import: ["@key","@shareable"])
        
type Query {
   ### User accounts
  user(id: ID!): User @shareable
  "Currently logged-in user"
  me: User! @shareable
}

"Represents an Airlock user's common properties"
interface User {
  id: ID!
  "The user's first and last name"
  name: String! 
  "The user's profile photo URL"
  profilePicture: String! 
}

type Host implements User @key(fields: "id") {
  id: ID!
  "The user's first and last name"
  name: String! @shareable
  "The user's profile photo URL"
  profilePicture: String! @shareable
  "The host's profile bio description, will be shown in the listing"
  profileDescription: String! @shareable
}

type Guest implements User @key(fields:"id") {
  id: ID!
  "The user's first and last name"
  name: String! @shareable
  "The user's profile photo URL"
  profilePicture: String! @shareable

}
interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! 
  "Indicates whether the mutation was successful"
  success: Boolean! 
  "Human-readable message for the UI"
  message: String! 
}

"The response after updating a profile"
type UpdateProfileResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! 
  "Indicates whether the mutation was successful"
  success: Boolean! 
  "Human-readable message for the UI"
  message: String! 
  "Updated user"
  user: User @shareable
}

"Fields that can be updated"
input UpdateProfileInput {
  "The user's first and last name"
  name: String 
  "The user's profile photo URL"
  profilePicture: String 
  "The host's profile bio description, will be shown in the listing"
  profileDescription: String 
}

type Mutation {
  "Updates the logged-in user's profile information"
  updateProfile(updateProfileInput: UpdateProfileInput): UpdateProfileResponse! @shareable
}